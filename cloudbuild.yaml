steps:
  # Build the Docker image with caching
  - name: 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/cloud-builders/docker'
    args: [
      'build',
      '--cache-from', 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:latest',
      '--build-arg', 'NEXT_PUBLIC_DEFAULT_AGENT_ID=${_NEXT_PUBLIC_DEFAULT_AGENT_ID}',
      '--build-arg', 'NEXT_PUBLIC_API_ORIGIN=${_NEXT_PUBLIC_API_ORIGIN}',
      '--build-arg', 'NEXT_PUBLIC_API_BASE_URL=${_NEXT_PUBLIC_API_BASE_URL}',
      '--build-arg', 'NEXT_PUBLIC_NANGO_API_URL=${_NEXT_PUBLIC_NANGO_API_URL}',
      '--build-arg', 'NEXT_PUBLIC_NANGO_SECRET_KEY=${_NEXT_PUBLIC_NANGO_SECRET_KEY}',
      '--build-arg', 'NEXT_PUBLIC_NANGO_BASE_URL=${_NEXT_PUBLIC_NANGO_BASE_URL}',
      '--build-arg', 'COLLABORATION_WS_URL=${_COLLABORATION_WS_URL}',
      '--build-arg', 'NEXT_PUBLIC_SENTRY_DSN=${_NEXT_PUBLIC_SENTRY_DSN}',
      '--build-arg', 'SENTRY_AUTH_TOKEN=${_SENTRY_AUTH_TOKEN}',
      '-t', 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:$COMMIT_SHA',
      '-t', 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:latest',
      '.'
    ]

  # Push the Docker image
  - name: 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/cloud-builders/docker'
    args: ['push', 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:$COMMIT_SHA']

  - name: 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/cloud-builders/docker'
    args: ['push', 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:latest']

  # Deploy to VM using gcloud compute ssh
  - name: 'australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Deploy to VM
        gcloud compute ssh ${_VM_INSTANCE_NAME} \
          --zone=${_VM_ZONE} \
          --project=$PROJECT_ID \
          --command="
            IMAGE_FRONTEND=australia-southeast1-docker.pkg.dev/$PROJECT_ID/containers/opie-frontend:$COMMIT_SHA
            mkdir -p ~/frontend
            cd ~/frontend
            
            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOF'
        services:
          frontend:
            container_name: opie-frontend
            image: \${IMAGE_FRONTEND}
            ports:
              - \"5173:3000\"
            restart: unless-stopped
            healthcheck:
              test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:3000/\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            environment:
              - NODE_ENV=production
              - NEXT_PUBLIC_DEFAULT_AGENT_ID=${_NEXT_PUBLIC_DEFAULT_AGENT_ID}
              - NEXT_PUBLIC_API_ORIGIN=${_NEXT_PUBLIC_API_ORIGIN}
              - NEXT_PUBLIC_API_BASE_URL=${_NEXT_PUBLIC_API_BASE_URL}
              - NEXT_PUBLIC_NANGO_API_URL=${_NEXT_PUBLIC_NANGO_API_URL}
              - NEXT_PUBLIC_NANGO_SECRET_KEY=${_NEXT_PUBLIC_NANGO_SECRET_KEY}
              - NEXT_PUBLIC_NANGO_BASE_URL=${_NEXT_PUBLIC_NANGO_BASE_URL}
              - COLLABORATION_WS_URL=${_COLLABORATION_WS_URL}
              - NEXT_PUBLIC_SENTRY_DSN=${_NEXT_PUBLIC_SENTRY_DSN}
              - SENTRY_AUTH_TOKEN=${_SENTRY_AUTH_TOKEN}
        EOF
            
            # Update image in docker-compose.yml
            sed -i \"s|\\\${IMAGE_FRONTEND}|\$IMAGE_FRONTEND|g\" docker-compose.yml
            
            # Pull and restart
            sudo docker-compose pull
            sudo docker-compose down --remove-orphans || true
            sudo docker-compose up -d --remove-orphans
            
            # Verify container is running
            echo \"Checking container status...\"
            sudo docker ps --filter name=opie-frontend --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"
            
            # Wait a moment for container to fully start
            sleep 5
            
            # Check if container is healthy
            if sudo docker ps --filter name=opie-frontend --filter status=running --format \"{{.Names}}\" | grep -q opie-frontend; then
              echo \"✅ Container opie-frontend is running successfully\"
            else
              echo \"❌ Container opie-frontend failed to start\"
              sudo docker logs opie-frontend || echo \"No logs available\"
              exit 1
            fi
            
            sudo docker image prune -f
          "

# Substitution variables (set in Cloud Build trigger)
substitutions:
  _NEXT_PUBLIC_DEFAULT_AGENT_ID: ''
  _NEXT_PUBLIC_API_ORIGIN: ''
  _NEXT_PUBLIC_API_BASE_URL: ''
  _NEXT_PUBLIC_NANGO_API_URL: ''
  _NEXT_PUBLIC_NANGO_SECRET_KEY: ''
  _NEXT_PUBLIC_NANGO_BASE_URL: ''
  _COLLABORATION_WS_URL: ''
  _NEXT_PUBLIC_SENTRY_DSN: ''
  _SENTRY_AUTH_TOKEN: ''
  _VM_INSTANCE_NAME: ''
  _VM_ZONE: ''

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Faster builds
